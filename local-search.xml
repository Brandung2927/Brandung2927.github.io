<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>基于Fleck框架的WebSocket实时通信实现流程</title>
    <link href="/2023/09/06/%E5%9F%BA%E4%BA%8EFleck%E6%A1%86%E6%9E%B6%E7%9A%84WebSocket%E5%AE%9E%E6%97%B6%E9%80%9A%E4%BF%A1%E5%AE%9E%E7%8E%B0%E6%B5%81%E7%A8%8B/"/>
    <url>/2023/09/06/%E5%9F%BA%E4%BA%8EFleck%E6%A1%86%E6%9E%B6%E7%9A%84WebSocket%E5%AE%9E%E6%97%B6%E9%80%9A%E4%BF%A1%E5%AE%9E%E7%8E%B0%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="Fleck简介"><a href="#Fleck简介" class="headerlink" title="Fleck简介"></a>Fleck简介</h2><p><a href="https://github.com/statianzo/Fleck">Fleck</a>是一个用于.NET平台的轻量级开源WebSocket库，用于创建WebSocket服务器和客户端。 它使开发人员能够在.NET应用程序中轻松地实现WebSocket通信，包括创建WebSocket服务器以便与客户端建立连接，或者创建WebSocket客户端以连接到WebSocket服务器。 </p><h2 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>使用NuGet包管理器安装Fleck框架，最新版本为1.2.0，支持.NET Framework 4.0及以上版本和.NET Core 2.0及以上版本。 Visual Studio可点击菜单栏“工具 -&gt; Nuget包管理器 -&gt; 管理解决方案的Nuget程序包”，并搜索Fleck，点击安装。 <img src="/2023/09/06/%E5%9F%BA%E4%BA%8EFleck%E6%A1%86%E6%9E%B6%E7%9A%84WebSocket%E5%AE%9E%E6%97%B6%E9%80%9A%E4%BF%A1%E5%AE%9E%E7%8E%B0%E6%B5%81%E7%A8%8B/1.jpg">也可以在程序包管理器控制台中输入如下代码进行安装：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dotnet <span class="token function">add</span> package Fleck <span class="token parameter variable">--version</span> <span class="token number">1.2</span>.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><p>以下代码示例来自官方网站：</p><figure><div class="code-wrapper"><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">Fleck</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Program</span><span class="token punctuation">&#123;</span><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>   <span class="token comment">//创建服务器实例</span>    <span class="token class-name"><span class="token keyword">var</span></span> server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">WebSocketServer</span><span class="token punctuation">(</span><span class="token string">"ws://localhost:8181"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    server<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span>socket <span class="token operator">=></span>    <span class="token punctuation">&#123;</span><span class="token comment">//与服务器连接后调用</span>      socket<span class="token punctuation">.</span>OnOpen <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"WebSocket opened"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//连接关闭后调用</span>      socket<span class="token punctuation">.</span>OnClose <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"WebSocket closed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//收到消息时调用</span>      socket<span class="token punctuation">.</span>OnMessage <span class="token operator">=</span> message <span class="token operator">=></span> socket<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span><span class="token string">"You said: "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"WebSocket server is running. Press Enter to exit."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="Web-Api和Vue2项目中的实现"><a href="#Web-Api和Vue2项目中的实现" class="headerlink" title="Web Api和Vue2项目中的实现"></a>Web Api和Vue2项目中的实现</h2><p>以下代码实现了一个简单的WebSocket通信示例，访问api后，WebSocket服务器会向所有连接的管道发送消息，前端接收消息后弹框显示实时通知。 本示例的后端环境为基于.NET FrameWork 4.7.2的Web API项目，前端为基于Vue 2.6.10的Vue-cli项目。 因Global.asax.cs文件中的变量可以在任何Action中全局访问，所以将创建WebSocket服务器实例的代码写在该文件中。 </p><p>Global.asax.cs</p><figure><div class="code-wrapper"><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">Fleck</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Web</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">CRS_SaaS</span><span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebApiApplication</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">System<span class="token punctuation">.</span>Web<span class="token punctuation">.</span>HttpApplication</span></span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">WebSocketServer</span> server<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List<span class="token punctuation">&lt;</span>IWebSocketConnection<span class="token punctuation">></span></span> allSockets<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Application_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token comment">//...</span>      <span class="token comment">//所有连接的socket列表</span>      allSockets <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>IWebSocketConnection<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建WebSocket服务器实例</span>      server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">WebSocketServer</span><span class="token punctuation">(</span><span class="token string">"ws://127.0.0.1:8181"</span><span class="token punctuation">)</span> <span class="token comment">//服务器地址</span>      <span class="token punctuation">&#123;</span>        <span class="token comment">//出错后进行重启</span>        RestartAfterListenError <span class="token operator">=</span> <span class="token boolean">true</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token comment">//开始监听</span>      server<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span>socket <span class="token operator">=></span>      <span class="token punctuation">&#123;</span>        <span class="token comment">//关联连接建立事件</span>        socket<span class="token punctuation">.</span>OnOpen <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>        <span class="token punctuation">&#123;</span>          allSockets<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>Diagnostics<span class="token punctuation">.</span>Debug<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"新的WebSocket连接"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>Diagnostics<span class="token punctuation">.</span>Debug<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"当前在线人数：</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">allSockets<span class="token punctuation">.</span>Count</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">//关联连接关闭事件</span>        socket<span class="token punctuation">.</span>OnClose <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>        <span class="token punctuation">&#123;</span>allSockets<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>Diagnostics<span class="token punctuation">.</span>Debug<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"WebSocket连接已关闭"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>Diagnostics<span class="token punctuation">.</span>Debug<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"当前在线人数：</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">allSockets<span class="token punctuation">.</span>Count</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>          <span class="token comment">//接受客户端消息事件</span>        socket<span class="token punctuation">.</span>OnMessage <span class="token operator">=</span> message <span class="token operator">=></span>        <span class="token punctuation">&#123;</span>          System<span class="token punctuation">.</span>Diagnostics<span class="token punctuation">.</span>Debug<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>在Action中向所有管道发送消息：</p><p>WebSocketController.cs</p><figure><div class="code-wrapper"><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Web<span class="token punctuation">.</span>Http</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Controllers</span><span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketController</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ApiController</span></span>  <span class="token punctuation">&#123;</span>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span><span class="token punctuation">,</span> <span class="token class-name">HttpOptions</span></span><span class="token punctuation">]</span>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Route</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"api/websocket/test/&#123;message&#125;"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> message<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      WebApiApplication<span class="token punctuation">.</span>allSockets<span class="token punctuation">.</span><span class="token function">ForEach</span><span class="token punctuation">(</span>socket <span class="token operator">=></span> socket<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>前端组件JS代码：</p><p>WebSocketTest.vue</p><figure><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">connected</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//若未连接成功，每一分钟请求重连一次</span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>_this<span class="token punctuation">.</span><span class="token function">initConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">60000</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token function">initConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>connected <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> wsImpl <span class="token operator">=</span> window<span class="token punctuation">.</span>WebSocket <span class="token operator">||</span> window<span class="token punctuation">.</span>MozWebSocket<span class="token punctuation">;</span><span class="token comment">//创建WebSocket客户端实例并连接</span>window<span class="token punctuation">.</span>ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">wsImpl</span><span class="token punctuation">(</span><span class="token string">'ws://127.0.0.1:8181'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//接收到服务端消息时调用</span>ws<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">evt</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//弹窗显示消息</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">接收到服务器消息:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>evt<span class="token punctuation">.</span>data<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//连接成功后调用</span>ws<span class="token punctuation">.</span><span class="token function-variable function">onopen</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'WebSocket服务器连接成功'</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>connected <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//连接关闭后调用</span>ws<span class="token punctuation">.</span><span class="token function-variable function">onclose</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>connected <span class="token operator">=</span> <span class="token boolean">false</span><span class="token comment">//一定时间内无通信会自动关闭连接，关闭后重新请求连接以保持在线状态</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="关于管道区分"><a href="#关于管道区分" class="headerlink" title="关于管道区分"></a>关于管道区分</h2><p>使用socket.ConnectionInfo可以查询到连接的基本信息，除了使用如客户端IP、端口、Header等区分管道外，还可以在URL后拼接参数，以此来区分不同的管道。 如以下的URL形式：ws:&#x2F;&#x2F;127.0.0.1:8181?id&#x3D;123&amp;name&#x3D;matcha 使用如下代码即可解析出其中的参数值： </p><figure><div class="code-wrapper"><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name"><span class="token keyword">var</span></span> uri <span class="token operator">=</span> socket<span class="token punctuation">.</span>ConnectionInfo<span class="token punctuation">.</span>Path<span class="token punctuation">;</span><span class="token class-name"><span class="token keyword">var</span></span> query <span class="token operator">=</span> uri<span class="token punctuation">.</span><span class="token function">Substring</span><span class="token punctuation">(</span>uri<span class="token punctuation">.</span><span class="token function">IndexOf</span><span class="token punctuation">(</span><span class="token string">"?"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name"><span class="token keyword">var</span></span> queryString <span class="token operator">=</span> System<span class="token punctuation">.</span>Web<span class="token punctuation">.</span>HttpUtility<span class="token punctuation">.</span><span class="token function">ParseQueryString</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name"><span class="token keyword">string</span></span> id <span class="token operator">=</span> queryString<span class="token punctuation">[</span><span class="token string">"id"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name"><span class="token keyword">string</span></span> name <span class="token operator">=</span> queryString<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="关于心跳检测"><a href="#关于心跳检测" class="headerlink" title="关于心跳检测"></a>关于心跳检测</h2><p>WebSocket心跳检测的目的用一句话概括就是客户端和服务端保证彼此还活着，客户端和服务端定期互相发送心跳检测信息，避免丢包发生。 WebSocket断开一般分两种情况： </p><h3 id="前端断开"><a href="#前端断开" class="headerlink" title="前端断开"></a>前端断开</h3><p>在使用websocket过程中，可能会出现网络断开的情况，比如信号不好，或者网络临时关闭，这时候websocket的连接已经断开，而不同浏览器有不同的机制，触发onclose的时机也不同，并不会理想执行websocket的onclose方法，我们无法知道是否断开连接，也就无法进行重连操作。</p><h3 id="后端断开"><a href="#后端断开" class="headerlink" title="后端断开"></a>后端断开</h3><p>如果后端因为一些情况需要断开ws，在可控情况下，会下发一个断连的消息通知，之后才会断开，我们便会重连。如果因为一些异常断开了连接，我们是不会感应到的，所以如果我们发送了心跳一定时间之后，后端既没有返回心跳响应消息，前端又没有收到任何其他消息的话，我们就能断定后端主动断开了。因此需要一种机制来检测客户端和服务端是否处于正常连接的状态。通过在指定时间间隔发送心跳包来保证连接正常，如果连接出现问题，就需要手动触发onclose事件，这时候便可进行重连操作。因此websocket心跳重连就应运而生。</p><h3 id="Fleck框架方法"><a href="#Fleck框架方法" class="headerlink" title="Fleck框架方法"></a>Fleck框架方法</h3><p>Fleck中提供了用于进行心跳检测的方法，使用socket.SendPing()和SocketPong()来进行心跳检测的发送和接收。具体使用方法详见GitHub官方文档。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>DDNet开服指南</title>
    <link href="/2023/06/16/ddnet%E5%BC%80%E6%9C%8D%E6%8C%87%E5%8D%97/"/>
    <url>/2023/06/16/ddnet%E5%BC%80%E6%9C%8D%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<h2 id="1-开启DDNet服务器"><a href="#1-开启DDNet服务器" class="headerlink" title="1.开启DDNet服务器"></a>1.开启DDNet服务器</h2><p>在控制台中输入以下命令：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 切换到DDNet服务器文件目录</span><span class="token builtin class-name">cd</span> /ddraceservice/DDNet-16.7.2-linux_x86_64/<span class="token comment"># 在后台运行该目录下的DDNet-Server文件</span><span class="token function">nohup</span> ./DDNet-Server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p> <img src="/2023/06/16/ddnet%E5%BC%80%E6%9C%8D%E6%8C%87%E5%8D%97/1.jpg">如上图所示表示服务器成功开启。此后可以关闭该窗口，服务器会在后台保持运行。</p><h2 id="2-关闭DDNet服务器"><a href="#2-关闭DDNet服务器" class="headerlink" title="2.关闭DDNet服务器"></a>2.关闭DDNet服务器</h2><p>首先在控制台输入以下命令，查询服务器的进程号：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> –ef <span class="token operator">|</span> <span class="token function">grep</span> DDNet-Server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>随后在控制台输入：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">kill</span> <span class="token parameter variable">-9</span> 进程号<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>将进程杀死，如下图所示。<img src="/2023/06/16/ddnet%E5%BC%80%E6%9C%8D%E6%8C%87%E5%8D%97/2.jpg"></p><h2 id="3-配置DDNet服务器"><a href="#3-配置DDNet服务器" class="headerlink" title="3.配置DDNet服务器"></a>3.配置DDNet服务器</h2><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /ddraceservice/DDNet-16.7.2-linux_x86_64/data<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>进入以上目录并找到该目录下的文件autoexec_server.cfg，双击打开。<img src="/2023/06/16/ddnet%E5%BC%80%E6%9C%8D%E6%8C%87%E5%8D%97/3.jpg">该文件即为DDNet服务器的配置文件，其中以#开头的行为注释，其余为配置项。对于配置项的详细解释，可参考此网页中的Server Settings一栏：<a href="https://ddnet.org/settingscommands/">https://ddnet.org/settingscommands/</a><br>地图文件（.map）上传目录：&#x2F;ddraceservice&#x2F;DDNet-16.7.2-linux_x86_64&#x2F;data&#x2F;maps</p>]]></content>
    
    
    <categories>
      
      <category>技术文档</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DDNet</tag>
      
      <tag>开服</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>毕业小记</title>
    <link href="/2023/06/01/%E6%AF%95%E4%B8%9A%E5%B0%8F%E8%AE%B0/"/>
    <url>/2023/06/01/%E6%AF%95%E4%B8%9A%E5%B0%8F%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>还记得那天拍毕业照的时候，我努力维持着自己有些僵硬的微笑。<br>身边是我也许再也见不到的同学，身上是我再也不会穿上的学士服。<br>摄影师在倒数着三二一，身边的同学在调整着学士帽。<br>我什么都没有做，只是呆呆地看着摄像机的镜头。<br>我的眼前一片模糊。</p><p>新的夏天即将来临了，我却想起高中毕业的那个夏天。<br>那时的我有很多的梦想，有对自己的，有对大学四年的，也有对这个世界的。<br>我想要好好学习，将来找个不错的工作；<br>我想要好好锻炼，拥有健康的体魄；<br>我想要好好社交，认识更多新的朋友；<br>我想要好好享受青春最后的四年中最靓丽的时光。<br>「是的，我已经十八岁了，该去认识一下外面的世界了。」</p><p>第一个学期的我发现大学生活和想象中的不太一样，但我总归适应的还算不错。<br>感受着大学的节奏和氛围，在忙碌、摆烂、忙里偷闲的时光之间兜着圈子。<br>经历着和许多大学生一样，却又有那么些不太一样的时光。<br>我以为这样的时光会再持续很久，直到2019年末的一场风暴。<br>当时我不知道这场风暴，竟会在一定程度上卷走我的青春，甚至是许多人的生命。<br>被迫开始的网课生涯中，有温情也有冰凉，但更多的是水深与火热。<br>在最严重的时间里，我曾感到过无助和惶恐。<br>那种感觉如同溺水一般，冰冷、黑暗与寂静将我包围。<br>有时情况稍微好了一些，让我以为一切都快过去了。<br>然而事实却是，它在不断的延宕之间持续了三年之久，直到大学毕业。<br>反而是那一点点解封自由的时光让我珍惜备至。<br>我再次回想起曾经多少的梦想，都在这莫名其妙的时光里消解、走散了。</p><p>转念一想，这也许就是属于我们这一届年轻人的长征吧。<br>也有许多人和我经历一样的压力和悲喜，我和那么多人一样走过这样的四年。<br>恍惚间我看到摄影师挥手示意，说：「好了，大家下来吧。」<br>隐隐约约听见他小声地呢喃道：「都结束了。」<br>一股不知是悲是喜的空气在人群之间弥散着。<br>大家很快走下台子，各奔东西，快得就像这四年的时光一样。<br>我脑子里一片空白，跟着他们走下台子。<br>「都结束了。」<br>我的脑海里只剩下了这一句话。</p><p>有时候我在想，当我们在回忆时，我们到底在回忆什么。<br>大学四年就像一段模糊的重影，我大概能够想起某一些细节，但它对于我到底意味着什么呢？<br>我实在说不清楚。<br>也许有时候我们怀念的不是以前的时光。毕竟不是每个人的大学都过得不错，甚至有些过得十分艰难。<br>记忆中总有乏善可陈的部分。「说白了，其实好像也就那么回事。」<br>其实真正让我感慨的，是人生中的四年，就这么轻飘飘地飞走了。<br>它快到我至今都还没有完全反应过来，它成为了我永远只能在记忆中寻找的存在。<br>我们也许还很年轻，但青春已经画上了句号。</p><p>大学四年不过人生中的须臾，收藏起回忆，准备迎接新的人生吧。</p><blockquote><p>莫道前程多风雨，云开雾散终有时。</p></blockquote><blockquote><p>Someday we will foresee obstacles, through the blizzard, through the blizzard.</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>毕业</tag>
      
      <tag>回忆</tag>
      
      <tag>大学</tag>
      
      <tag>纪念我那一文不值又如黄金般的青春</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于Hexo的个人博客搭建流程</title>
    <link href="/2023/05/28/%E5%9F%BA%E4%BA%8EHexo%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/"/>
    <url>/2023/05/28/%E5%9F%BA%E4%BA%8EHexo%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Hexo是一个基于Node.js的静态博客框架，它可以帮助用户快速构建、部署和维护静态博客网站。Hexo的设计目标是简洁、快速和高效，使用户能够专注于写作而不必担心复杂的技术细节。</p><p>Hexo使用Markdown作为主要的写作格式，支持使用主题和插件来定制网站外观和功能。用户可以通过自定义主题来创建独特的博客风格，也可以使用插件来添加额外的功能，如社交媒体分享、评论系统等。</p><p>本博客即基于<a href="https://hexo.io/zh-cn/">Hexo</a>框架和<a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid</a>主题一通爆改搭建而成。下面介绍从零开始搭建此博客的流程，仅供参考。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li>拥有一台Windows &#x2F; Mac &#x2F; Linux系统的主机</li><li>拥有可用的文本编辑器（最好支持Markdown语法）</li><li>能够访问互联网</li><li>可用的<a href="https://github.com/">Github</a>账号</li></ul><h2 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h2><h3 id="1-安装node环境"><a href="#1-安装node环境" class="headerlink" title="1. 安装node环境"></a>1. 安装node环境</h3><p>Hexo渲染静态页面需要依赖node.js，因此需要先安装此环境。可进入<a href="https://nodejs.org/zh-cn">node.js</a>官方网站进行下载安装。<br><img src="/2023/05/28/%E5%9F%BA%E4%BA%8EHexo%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/1.jpg">安装完成后进入终端命令行输入<code>node -v</code>命令查看node版本号。<br>windows系统进入命令行方法：按下<kbd>win</kbd>+<kbd>R</kbd>键，在弹出的窗口中输入<code>cmd</code>,并敲回车。<img src="/2023/05/28/%E5%9F%BA%E4%BA%8EHexo%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/2.jpg">若显示正常，则node.js环境已经成功安装。</p><h3 id="2-安装Hexo"><a href="#2-安装Hexo" class="headerlink" title="2. 安装Hexo"></a>2. 安装Hexo</h3><p>首先安装cnpm包管理器，打开终端执行命令：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> cnpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>安装成功后即可开始安装Hexo框架，打开终端执行以下命令：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cnpm <span class="token function">install</span> <span class="token parameter variable">-g</span> hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>默认会安装最新版本，安装完成后可输入<code>hexo -v</code>命令查看hexo版本号，验证是否安装成功。</p><h3 id="3-启动Hexo"><a href="#3-启动Hexo" class="headerlink" title="3. 启动Hexo"></a>3. 启动Hexo</h3><p>在本地新建一个文件夹，用作博客项目的文件夹。如<code>D:\Hexo</code>。建好文件夹后打开命令行，需要先切换至该目录。Linux系统下使用<code>cd 路径</code>命令来切换目录。Windows系统下首先输入盘符来切换磁盘，再使用<code>cd 路径</code>来切换目录。<br>在该目录下使用<code>hexo init</code>命令来初始化一个博客项目。指令示例如下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Linux系统：</span><span class="token builtin class-name">cd</span> /root/hexohexo init<span class="token comment"># Windows系统：</span>D:<span class="token builtin class-name">cd</span> D:<span class="token punctuation">\</span>Hexohexo init<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>指令输入完毕后，应当看到该文件夹下生成了博客项目的目录结构。目录结构的大致说明如下：</p><blockquote><p>.<br>├── _config.yml<br>├── package.json<br>├── scaffolds<br>├── source<br>|   ├── _drafts<br>|   └── _posts<br>└── themes</p></blockquote><ul><li><p>_config.yml<br>网站的配置信息，您可以在此配置大部分的参数。</p></li><li><p>package.json<br>应用程序的信息。EJS, Stylus 和 Markdown renderer 已默认安装，您可以自由移除。</p></li><li><p>scaffolds<br>模版文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。<br>Hexo的模板是指在新建的文章文件中默认填充的内容。例如，如果您修改scaffold&#x2F;post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。</p></li><li><p>source<br>资源文件夹是存放用户资源的地方。除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 &#x2F; 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。</p></li><li><p>themes<br>主题 文件夹。Hexo 会根据主题来生成静态页面。</p></li></ul><p>在该目录命令行输入以下指令，即可刷新配置后，生成相应的静态网站，并开启本地4000端口的服务器。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo cleanhexo ghexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p><img src="/2023/05/28/%E5%9F%BA%E4%BA%8EHexo%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/3.jpg">看到如上图所示的提示信息，即代表博客已经在本地服务器启动。<br>打开浏览器键入<code>http://localhost:4000/</code>回车，即可看到默认主题下的博客界面。<img src="/2023/05/28/%E5%9F%BA%E4%BA%8EHexo%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/4.jpg">自此，博客已经成功安装并启动成功。<br>关于Hexo的更多指令，可以参考<a href="https://hexo.io/zh-cn/docs/commands">Hexo指令官方文档</a>，文档中对各个指令有更为详细的介绍。</p><h2 id="部署博客"><a href="#部署博客" class="headerlink" title="部署博客"></a>部署博客</h2><p>待更新……</p>]]></content>
    
    
    <categories>
      
      <category>技术文档</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>博客搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/05/25/hello-world/"/>
    <url>/2023/05/25/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Hello World！我的第一篇博客。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title>关于我</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[]]></content>
    
  </entry>
  
  
  
</search>
